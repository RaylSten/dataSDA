cor(mushroom.QM$Pileus.Cap.Width, mushroom.QM$Stipe.Length) # 0.855587
cov(mushroom.QM$Pileus.Cap.Width, mushroom.QM$Stipe.Length) # 13.60857
# SE
Pileus.Cap.Width.SE <- c()
# SE
Pileus.Cap.Width.SE <- c()
Stipe.Length.SE <- c()
Stipe.Thickness.SE <- c()
for (i in 1:nrow(mush)){
for (j in 1:2){
Pileus.Cap.Width.SE <- c(Pileus.Cap.Width.SE, mush[i, j])
Stipe.Length.SE <- c(Stipe.Length.SE, mush[i, j + 2])
Stipe.Thickness.SE <- c(Stipe.Thickness.SE, mush[i, j + 4])
}
}
mushroom.SE <- data.frame(Pileus.Cap.Width = Pileus.Cap.Width.SE,
Stipe.Length = Stipe.Length.SE,
Stipe.Thickness = Stipe.Thickness.SE)
head(mushroom.SE)
mean(mushroom.SE$Pileus.Cap.Width) # 7.978261
var(mushroom.SE$Pileus.Cap.Width) # 26.03285
mean(mushroom.SE$Pileus.Cap.Width) # 7.978261
var(mushroom.SE$Pileus.Cap.Width) # 26.03285
cor(mushroom.SE$Pileus.Cap.Width, mushroom.SE$Stipe.Length) # 0.8817636
cov(mushroom.SE$Pileus.Cap.Width, mushroom.SE$Stipe.Length) # 20.18647
# FV
Pileus.Cap.Width.model <- lm(mush[, 2] ~ mush[, 1])
Stipe.Length.model <- lm(mush[, 4] ~ mush[, 3])
Stipe.Thickness.model <- lm(mush[, 6] ~ mush[, 5])
Pileus.Cap.Width.FV <- predict(Pileus.Cap.Width.model)
Stipe.Length.FV <- predict(Stipe.Length.model)
Stipe.Thickness.FV <- predict(Stipe.Thickness.model)
mushroom.FV <- data.frame(Pileus.Cap.Width = Pileus.Cap.Width.FV,
Stipe.Length = Stipe.Length.FV,
Stipe.Thickness = Stipe.Thickness.FV)
mean(mushroom.FV$Pileus.Cap.Width) # 11.19565
var(mushroom.FV$Pileus.Cap.Width) # 13.8127
cor(mushroom.FV$Pileus.Cap.Width, mushroom.FV$Stipe.Length) # 0.7496622
cov(mushroom.FV$Pileus.Cap.Width, mushroom.FV$Stipe.Length) # 10.37204
mean(mushroom.int[, -c(1, 5)])$Pileus.Cap.Width # 7.978261
var(mushroom.int[, -c(1, 5)])$Pileus.Cap.Width # 22.93083 (錯的)
int_var <- function(x){
if (mode(x) == 'list'){
a <- apply(x, 1, Im)
b <- apply(x, 1, Re)
m <- nrow(x)
} else if (mode(x) == 'complex'){
a <- data.frame(x)$min
b <- data.frame(x)$max
m <- nrow(data.frame(x))
}
result <- sum(b^2 + b * a + a^2) / (3 * m) - (sum(b + a)/2)^2 / m^2
return(result)
}
int_var(mushroom.int$Pileus.Cap.Width)
int_var(mushroom.int[, 2])
a <- data.frame(mushroom.int$Pileus.Cap.Width)$min
b <- data.frame(mushroom.int$Pileus.Cap.Width)$max
# EJD
cov_bg <- cov(mushroom.int$Pileus.Cap.Width, mushroom.int$Stipe.Length, method = "BG") # 11.95054
cov_bg/(sqrt(int_var(mushroom.int[, 2])) * sqrt(int_var(mushroom.int[, 3]))) # 0.8452575
# GQ
cov_bd <- cov(mushroom.int$Pileus.Cap.Width, mushroom.int$Stipe.Length, method = "BD") # 11.46091
cov_bd/(sqrt(int_var(mushroom.int[, 2])) * sqrt(int_var(mushroom.int[, 3]))) # 0.8106262
# SPT
cov_b <- cov(mushroom.int$Pileus.Cap.Width, mushroom.int$Stipe.Length, method = "B") # 8.051985
cov_b/(sqrt(int_var(mushroom.int[, 2])) * sqrt(int_var(mushroom.int[, 3]))) # 0.5695142
int_var(mushroom.int[, 2])
var(mushroom.int[, -c(1, 5)])$Pileus.Cap.Width # 22.93083 (錯的)
int_var(mushroom.int$Pileus.Cap.Width)
int_var(mushroom.int[, 2])
int_var <- function(x){
if (mode(x) == 'list'){
a <- apply(x, 1, Im)
b <- apply(x, 1, Re)
m <- nrow(x)
} else if (mode(x) == 'complex'){
a <- data.frame(x)$min
b <- data.frame(x)$max
m <- nrow(data.frame(x))
}
result <- sum(b^2 + b * a + a^2) / (3 * m) - (sum(b + a)/2)^2 / m^2
return(result)
}
int_var(mushroom.int$Pileus.Cap.Width)
# Lin
interval_mean_estimation <- function(x){
if (mode(x) == 'list'){
return((Im(sum(apply(x, 1, sum))) + Re(sum(apply(x, 1, sum)))) / (2 * nrow(x)))
} else if (mode(x) == 'complex'){
return(sum(apply(data.frame(x), 1, sum)) / (2 * nrow(data.frame(x))))
} else {
print('Please enter interval variable.')
}
}
interval_mean_estimation(mushroom.int$Pileus.Cap.Width)
interval_var_estimation <- function(x, n, alpha = 3/8){
if (mode(x) == 'list'){
numerator <- (Im(sum(apply(x, 1, sum))) - Re(sum(apply(x, 1, sum)))) / nrow(x)
} else if (mode(x) == 'complex'){
numerator <- (sum(data.frame(x)$max - data.frame(x)$min)) / nrow(data.frame(x))
} else {
print('Please enter interval variable.')
}
denominator <- stats::qnorm((n - alpha) / (n - 2 * alpha + 1)) - stats::qnorm((1 - alpha) / (n - 2 * alpha + 1))
variance <- (numerator / denominator) ^ 2
return(variance)
}
interval_var_estimation(mushroom.int$Pileus.Cap.Width, n = 3, alpha = 3/8)
abalone
dataset <- read.csv('dataset.csv')
dataset
build.data <- function(){
usethis::use_data(dataset, overwrite = T)
}
build.data()
rm(list = ls())
library(roxygen2)
library(devtools)
roxygenise()
devtools::load_all(".")
devtools::check(".")
rm(list = ls())
devtools::load_all(".")
rm(list = ls())
devtools::load_all(".")
devtools::check(".")
rm(list = ls())
devtools::load_all(".")
devtools::check(".")
remove.packages("dataSDA")
install.packages("C:/Users/user/Desktop/dataSDA_0.1.0.zip", repos = NULL, type = "win.binary")
library(dataSDA)
data("dataset")
head(dataset)
cls
library(HistDAWass)
BLOOD
Blood <- BLOOD
Blood
Blood
build.data <- function(){
usethis::use_data(Blood, overwrite = T)
}
build.data()
rm(list = ls())
library(roxygen2)
library(devtools)
roxygenise()
devtools::load_all(".")
devtools::check(".")
HistDAWass::BLOOD
rm(list = ls())
library(roxygen2)
library(devtools)
devtools::load_all(".")
devtools::check(".")
Blood <- HistDAWass::BLOOD
Blood
rm(list = ls())
roxygenise()
rm(list = ls())
roxygenise()
rm(list = ls())
roxygenise()
HistDAWass::BLOOD
rm(list = ls())
roxygenise()
rm(list = ls())
roxygenise()
rm(list = ls())
roxygenise()
devtools::load_all(".")
devtools::check(".")
rm(list = ls())
roxygenise()
devtools::load_all(".")
devtools::check(".")
rm(list = ls())
roxygenise()
devtools::load_all(".")
devtools::check(".")
rm(list = ls())
roxygenise()
devtools::load_all(".")
devtools::check(".")
roxygenise()
roxygenise()
devtools::load_all(".")
devtools::check(".")
roxygenise()
devtools::load_all(".")
devtools::check(".")
remove.packages("dataSDA")
install.packages("C:/Users/user/Desktop/dataSDA_0.1.0.tar.gz", repos = NULL, type = "source")
library(dataSDA)
data(Blood)
Blood
hist_mean(Blood, Cholesterol)
hist_mean(Blood, 'Cholesterol')
library(roxygen2)
library(devtools)
rm(list = ls())
roxygenise()
devtools::load_all(".")
devtools::check(".")
library(HistDAWass)
Age_Pyramids <- HistDAWass::Age_Pyramids_2014
Age_Pyramids
build.data <- function(){
usethis::use_data(Age_Pyramids, overwrite = T)
}
build.data()
Agronomique <- HistDAWass::Agronomique
Agronomique
build.data <- function(){
usethis::use_data(Agronomique, overwrite = T)
}
build.data()
Bloodbrito <- HistDAWass::BloodBRITO
Bloodbrito
build.data <- function(){
usethis::use_data(Bloodbrito, overwrite = T)
}
build.data()
China_month <- HistDAWass::China_Month
China_month
build.data <- function(){
usethis::use_data(China_month, overwrite = T)
}
build.data()
China_seas <- HistDAWass::China_Seas
China_seas
build.data <- function(){
usethis::use_data(China_seas, overwrite = T)
}
build.data()
Ozonefull <- HistDAWass::OzoneFull
Ozonefull
build.data <- function(){
usethis::use_data(Ozonefull, overwrite = T)
}
build.data()
Ozoneh <- HistDAWass::OzoneH
Ozoneh
build.data <- function(){
usethis::use_data(Ozoneh, overwrite = T)
}
build.data()
library(roxygen2)
library(devtools)
rm(list = ls())
devtools::load_all(".")
roxygenise()
devtools::check(".")
library(dataSDA)
Abalone
library(RSDA)
abalone
Abalone <- abalone
Abalone
build.data <- function(){
usethis::use_data(Abalone, overwrite = T)
}
build.data()
age_cholesterol_weight.int
Age_cholesterol_weight <- age_cholesterol_weight.int
Age_cholesterol_weight
build.data <- function(){
usethis::use_data(Age_cholesterol_weight, overwrite = T)
}
build.data()
baseball.int
Baseball <- baseball.int
Baseball
build.data <- function(){
usethis::use_data(Baseball, overwrite = T)
}
build.data()
airline_flights
Airline_flights <- airline_flights
build.data <- function(){
usethis::use_data(Airline_flights, overwrite = T)
}
build.data()
Airline_flights2 <- airline_flights2
build.data <- function(){
usethis::use_data(Airline_flights2, overwrite = T)
}
build.data()
Bird <- bird.int
Bird
build.data <- function(){
usethis::use_data(Bird, overwrite = T)
}
build.data()
Blood_pressure <- blood_pressure.int
Blood_pressure
build.data <- function(){
usethis::use_data(Blood_pressure, overwrite = T)
}
build.data()
Cars.int
car.int
Cars <- Cars.int
build.data <- function(){
usethis::use_data(Cars, overwrite = T)
}
build.data()
car <- car.int
build.data <- function(){
usethis::use_data(car, overwrite = T)
}
build.data()
Car <- car.int
build.data <- function(){
usethis::use_data(Car, overwrite = T)
}
build.data()
build.data <- function(){
usethis::use_data(Car, overwrite = T)
}
build.data()
Chinatemp <- ChinaTemp.int
Chinatemp
build.data <- function(){
usethis::use_data(Chinatemp, overwrite = T)
}
build.data()
Crime <- crime
Crime
build.data <- function(){
usethis::use_data(Crime, overwrite = T)
}
build.data()
Crime2 <- crime2
build.data <- function(){
usethis::use_data(Crime2, overwrite = T)
}
build.data()
Facedata <- facedata
Facedata
build.data <- function(){
usethis::use_data(Facedata, overwrite = T)
}
build.data()
Finance <- finance.int
Finance
build.data <- function(){
usethis::use_data(Finance, overwrite = T)
}
build.data()
Fuel_consumption <- fuel_consumption
Fuel_consumption
build.data <- function(){
usethis::use_data(Fuel_consumption, overwrite = T)
}
build.data()
Health_insurance <- health_insurance
Health_insurance
build.data <- function(){
usethis::use_data(Health_insurance, overwrite = T)
}
build.data()
build.data <- function(){
usethis::use_data(Health_insurance, overwrite = T)
}
build.data()
Airline_flights <- airline_flights
Airline_flights
Airline_flights <- airline_flights
Airline_flights
build.data <- function(){
usethis::use_data(Airline_flights, overwrite = T)
}
build.data()
Airline_flights2 <- airline_flights2
Airline_flights2
build.data <- function(){
usethis::use_data(Airline_flights2, overwrite = T)
}
build.data()
Crime
build.data <- function(){
usethis::use_data(Crime, overwrite = T)
}
build.data()
Crime2
build.data <- function(){
usethis::use_data(Crime2, overwrite = T)
}
build.data()
Fuel_consumption
build.data <- function(){
usethis::use_data(Fuel_consumption, overwrite = T)
}
build.data()
Health_insurance2 <- health_insurance2
Health_insurance2
build.data <- function(){
usethis::use_data(Health_insurance2, overwrite = T)
}
build.data()
hierarchy
hierarchy.int
Hierarchy2 <- hierarchy
build.data <- function(){
usethis::use_data(Hierarchy2, overwrite = T)
}
build.data()
Hierarchy <- hierarchy.int
build.data <- function(){
usethis::use_data(Hierarchy, overwrite = T)
}
build.data()
horses.int
Horse <- horses.int
Horse
build.data <- function(){
usethis::use_data(Horse, overwrite = T)
}
build.data()
Lackinfo <- lackinfo.int
Lackinfo
build.data <- function(){
usethis::use_data(Lackinfo, overwrite = T)
}
build.data()
Loansby_purpose <- LoansbyPurpose.int
Loansby_purpose
build.data <- function(){
usethis::use_data(Loansby_purpose, overwrite = T)
}
build.data()
mushroom
mushroom.int
Mushroom <- mushroom.int
Mushroom2 <- mushroom
Mushroom <- mushroom.int
build.data <- function(){
usethis::use_data(Mushroom, overwrite = T)
}
build.data()
build.data <- function(){
usethis::use_data(Mushroom2, overwrite = T)
}
build.data()
Nycflights <- nycflights.int
Nycflights
build.data <- function(){
usethis::use_data(Nycflights, overwrite = T)
}
build.data()
Ohtemp <- ohtemp.int
Ohtemp
build.data <- function(){
usethis::use_data(Ohtemp, overwrite = T)
}
build.data()
Occupations <- occupations
Occupations
Occupations <- occupations
build.data <- function(){
usethis::use_data(Occupations, overwrite = T)
}
build.data()
Occupations2 <- occupations2
build.data <- function(){
usethis::use_data(Occupations2, overwrite = T)
}
build.data()
Profession <- profession.int
build.data <- function(){
usethis::use_data(Profession, overwrite = T)
}
build.data()
Soccer_bivar <- soccer.bivar.int
build.data <- function(){
usethis::use_data(Soccer_bivar, overwrite = T)
}
build.data()
Veterinary <- veterinary.int
build.data <- function(){
usethis::use_data(Veterinary, overwrite = T)
}
build.data()
library(roxygen2)
library(devtools)
roxygenise()
devtools::load_all(".")
devtools::check(".")
roxygenise()
devtools::load_all(".")
devtools::check(".")
roxygenise()
devtools::load_all(".")
devtools::check(".")
roxygenise()
devtools::load_all(".")
devtools::check(".")
roxygenise()
devtools::load_all(".")
devtools::check(".")
remove.packages("dataSDA")
install.packages("C:/Users/user/Desktop/dataSDA_0.2.0.zip", repos = NULL, type = "win.binary")
library(dataSDA)
data("Mushroom")
Mushroom
install.packages("C:/Users/user/Desktop/dataSDA_0.2.0.zip", repos = NULL, type = "win.binary")
library(dataSDA)
data("Loansby_risk_lvs")
head(Loansby_risk_lvs)
